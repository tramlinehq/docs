* Release Trains
** About
   - Trains are the atomic abstraction that carry some release coordination context.
   - Trains run on a fixed and/or reliable schedule, regardless of feature readiness in mainline.
   - Trains are an active artifact of automating various release-related runtime dependencies, for eg.
     - Branching
     - Tagging
     - Hotfixing
     - Beta testing
     - Quality checks
     - Halting
     - Pushing to store
   - Trains help not only automate, but also visualize the release process under a systematic cadence.
   - Multiple trains can be active at the same time, depending on variations in the runtime deps.
** Usefulness
   - Forcing function to speed up teams with slow or inconsistent delivery; adds discipline.
   - Demo-ing and QAing is streamlined like clockwork.
   - Release / delivery performance can be measured against the train abstraction.
   - Esp useful as a process when a single binary package is distributed without rollback-ability (e.g. mobile apps).
** Downsides
   - Adds temporal coupling around sequences of change.
   - Can potentially degrade quality if changes are rushed so as to not miss the train.
** High-level schema

|--------------------------+-------------------------------------------------------------|
| Train                    | For                                                         |
|--------------------------+-------------------------------------------------------------|
| name                     | Uniquely refer to a train (nightly-release, demo-prod etc.) |
| purpose                  | What is it for?                                             |
| start_time               | When does it start?                                         |
| interval                 | Repeat after x hours, days etc.                             |
| status (running, paused) | What is it doing right now?                                 |
|--------------------------+-------------------------------------------------------------|

|----------------------+----------------------------------------------------------------------------------------|
| Stop / Station       | For                                                                                    |
|----------------------+----------------------------------------------------------------------------------------|
| start_time           | This stop/station is run at this time, it must be before the train's computed end time |
| store_channel_config | What channels can it push to? (play store production, beta etc.)                       |
|----------------------+----------------------------------------------------------------------------------------|

** Potential mechanics
*** Configuring a new train
**** Preliminary setup
   - Things we'd require the user to configure:
     - App name
     - App package
     - Store platform
       - To submit new releases
       - To control staged rollout %
       - To edit store listing data (release notes, screenshots etc.)
     - Code source / VCS integration
       - Github
       - Bitbucket etc.
     - Hook to CI server
       - Jenkins
       - Github actions etc.
**** Setting up the train
   - Specify name, purpose, kickoff date/time, repeat interval (every day, hours etc.)
   - An initial (mandatory) station is created that needs to be configured that runs on kickoff date/time
     - Configure store channels (if any). For eg. push beta build to beta channel.
     -
   - More stations can be added
     - Repeat steps above to configure a station
     - Their start time must be before the end time of the next train's kickoff
*** Working with a configured train(s)
** References
   - https://adventuresinqa.com/2017/03/06/the-mobile-release-train
   - https://blog.bitrise.io/post/5-ways-the-best-mobile-teams-use-release-trains-for-increased-speed-and-efficiency
   - https://www.thoughtworks.com/en-in/radar/techniques/release-train
   - https://obvious.in/blog/from-feature-driven-delivery-to-timeline-driven-delivery
